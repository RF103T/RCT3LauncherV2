<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
	<Style x:Key="Arrow_ToggleButton_Style" TargetType="{x:Type ToggleButton}">
		<Setter Property="ClickMode" Value="Press"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border x:Name="templateRoot" Background="{TemplateBinding Background}" BorderThickness="0" BorderBrush="{x:Null}">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal">
									<Storyboard>
										<DoubleAnimation To="0" Duration="0:0:0.2" Storyboard.TargetName="Button_Background_Front" Storyboard.TargetProperty="Opacity"/>
										<DoubleAnimation To="0" Duration="0:0:0.2" Storyboard.TargetName="Button_Background_Unenable" Storyboard.TargetProperty="Opacity"/>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="MouseOver">
									<Storyboard Storyboard.TargetName="Button_Background_Front">
										<DoubleAnimation To="0.3" Duration="0:0:0.1" Storyboard.TargetProperty="Opacity"/>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Pressed">
									<Storyboard Storyboard.TargetName="Button_Background_Front">
										<DoubleAnimation To="0.15" Duration="0:0:0.1" Storyboard.TargetProperty="Opacity"/>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Disabled">
									<Storyboard Storyboard.TargetName="Button_Background_Unenable">
										<DoubleAnimation To="1" Duration="0:0:0.2" Storyboard.TargetProperty="Opacity"/>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Grid>
							<Rectangle x:Name="Button_Background_Front" Fill="{StaticResource Theme.Primary.Light.SolidColorBrush}" Opacity="0"/>
							<Rectangle x:Name="Button_Background_Unenable" Fill="{StaticResource Unenable}" Opacity="0"/>
							<Image x:Name="arrow"
							   Width="14" Height="14" Margin="5"
							   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							   Source="{StaticResource Dark_Arrow}"
							   RenderTransformOrigin="0.5,0.5">
								<Image.RenderTransform>
									<TransformGroup>
										<ScaleTransform ScaleX="1" ScaleY="0.8"/>
										<RotateTransform x:Name="arrowRotateTransform" Angle="-90"/>
									</TransformGroup>
								</Image.RenderTransform>
							</Image>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="True">
							<Trigger.EnterActions>
								<BeginStoryboard>
									<Storyboard Storyboard.TargetName="arrowRotateTransform">
										<DoubleAnimation To="90" Duration="0:0:0.4" Storyboard.TargetProperty="Angle">
											<DoubleAnimation.EasingFunction>
												<ExponentialEase Exponent="7" EasingMode="EaseOut" />
											</DoubleAnimation.EasingFunction>
										</DoubleAnimation>
									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard>
									<Storyboard Storyboard.TargetName="arrowRotateTransform">
										<DoubleAnimation To="-90" Duration="0:0:0.4" Storyboard.TargetProperty="Angle">
											<DoubleAnimation.EasingFunction>
												<ExponentialEase Exponent="7" EasingMode="EaseOut" />
											</DoubleAnimation.EasingFunction>
										</DoubleAnimation>
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="Reverse_Arrow_ToggleButton_Style" TargetType="{x:Type ToggleButton}">
		<Setter Property="ClickMode" Value="Press"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border x:Name="templateRoot" Background="{TemplateBinding Background}" BorderThickness="0" BorderBrush="{x:Null}">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal">
									<Storyboard>
										<DoubleAnimation To="0" Duration="0:0:0.2" Storyboard.TargetName="Button_Background_Unenable" Storyboard.TargetProperty="Opacity"/>
										<DoubleAnimation To="0" Duration="0:0:0.2" Storyboard.TargetName="gridTranslateTransform" Storyboard.TargetProperty="Y">
											<DoubleAnimation.EasingFunction>
												<ExponentialEase Exponent="7" EasingMode="EaseOut" />
											</DoubleAnimation.EasingFunction>
										</DoubleAnimation>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="MouseOver">
									<Storyboard Storyboard.TargetName="gridTranslateTransform">
										<DoubleAnimation To="-3" Duration="0:0:0.2" Storyboard.TargetProperty="Y">
											<DoubleAnimation.EasingFunction>
												<ExponentialEase Exponent="7" EasingMode="EaseOut" />
											</DoubleAnimation.EasingFunction>
										</DoubleAnimation>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Disabled">
									<Storyboard Storyboard.TargetName="Button_Background_Unenable">
										<DoubleAnimation To="1" Duration="0:0:0.2" Storyboard.TargetProperty="Opacity"/>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Grid>
							<Grid.RenderTransform>
								<TranslateTransform x:Name="gridTranslateTransform" Y="0"/>
							</Grid.RenderTransform>
							<Rectangle x:Name="Button_Background_Unenable" Fill="{StaticResource Unenable}" Opacity="0"/>
							<Image x:Name="arrow"
								   Width="14" Height="14" Margin="5"
								   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							       Source="{StaticResource Dark_Arrow}"
							       RenderTransformOrigin="0.5,0.5">
								<Image.RenderTransform>
									<TransformGroup>
										<ScaleTransform ScaleX="1" ScaleY="0.8"/>
										<RotateTransform x:Name="arrowRotateTransform" Angle="90"/>
									</TransformGroup>
								</Image.RenderTransform>
							</Image>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="True">
							<Trigger.EnterActions>
								<BeginStoryboard>
									<Storyboard Storyboard.TargetName="arrowRotateTransform">
										<DoubleAnimation To="-90" Duration="0:0:0.4" Storyboard.TargetProperty="Angle">
											<DoubleAnimation.EasingFunction>
												<ExponentialEase Exponent="7" EasingMode="EaseOut" />
											</DoubleAnimation.EasingFunction>
										</DoubleAnimation>
									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard>
									<Storyboard Storyboard.TargetName="arrowRotateTransform">
										<DoubleAnimation To="90" Duration="0:0:0.4" Storyboard.TargetProperty="Angle">
											<DoubleAnimation.EasingFunction>
												<ExponentialEase Exponent="7" EasingMode="EaseOut" />
											</DoubleAnimation.EasingFunction>
										</DoubleAnimation>
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ComboBox_ToggleButton_Style" TargetType="{x:Type ToggleButton}">
		<Setter Property="OverridesDefaultStyle" Value="true"/>
		<Setter Property="IsTabStop" Value="false"/>
		<Setter Property="Focusable" Value="false"/>
		<Setter Property="ClickMode" Value="Press"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border x:Name="templateRoot" Background="{TemplateBinding Background}" BorderThickness="0" BorderBrush="{x:Null}" SnapsToDevicePixels="true">
						<Border x:Name="splitBorder" BorderThickness="1" BorderBrush="Transparent" HorizontalAlignment="Right" Margin="0" SnapsToDevicePixels="true" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
							<Image x:Name="arrow" Source="{StaticResource Dark_Arrow}" Width="12" Height="12"  HorizontalAlignment="Center" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5">
								<Image.RenderTransform>
									<TransformGroup>
										<ScaleTransform ScaleX="1" ScaleY="0.8"/>
										<RotateTransform x:Name="arrowRotateTransform" Angle="-90"/>
									</TransformGroup>
								</Image.RenderTransform>
							</Image>
						</Border>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="True">
							<Trigger.EnterActions>
								<BeginStoryboard>
									<Storyboard Storyboard.TargetName="arrowRotateTransform">
										<DoubleAnimation To="90" Duration="0:0:0.4" Storyboard.TargetProperty="Angle">
											<DoubleAnimation.EasingFunction>
												<ExponentialEase Exponent="7" EasingMode="EaseOut" />
											</DoubleAnimation.EasingFunction>
										</DoubleAnimation>
									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard>
									<Storyboard Storyboard.TargetName="arrowRotateTransform">
										<DoubleAnimation To="-90" Duration="0:0:0.4" Storyboard.TargetProperty="Angle">
											<DoubleAnimation.EasingFunction>
												<ExponentialEase Exponent="7" EasingMode="EaseOut" />
											</DoubleAnimation.EasingFunction>
										</DoubleAnimation>
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
						</Trigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
								<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false"/>
								<Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false"/>
								<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Background" TargetName="templateRoot" Value="White"/>
							<Setter Property="BorderBrush" TargetName="templateRoot" Value="#FFABADB3"/>
							<Setter Property="Background" TargetName="splitBorder" Value="Transparent"/>
							<Setter Property="BorderBrush" TargetName="splitBorder" Value="Transparent"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Background" TargetName="templateRoot">
								<Setter.Value>
									<LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
										<GradientStop Color="#FFECF4FC" Offset="0.0"/>
										<GradientStop Color="#FFDCECFC" Offset="1.0"/>
									</LinearGradientBrush>
								</Setter.Value>
							</Setter>
							<Setter Property="BorderBrush" TargetName="templateRoot" Value="#FF7EB4EA"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Background" TargetName="templateRoot" Value="White"/>
							<Setter Property="BorderBrush" TargetName="templateRoot" Value="#FF7EB4EA"/>
							<Setter Property="Background" TargetName="splitBorder" Value="White"/>
							<Setter Property="BorderBrush" TargetName="splitBorder" Value="#FF7EB4EA"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Background" TargetName="templateRoot">
								<Setter.Value>
									<LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
										<GradientStop Color="#FFDAECFC" Offset="0.0"/>
										<GradientStop Color="#FFC4E0FC" Offset="1.0"/>
									</LinearGradientBrush>
								</Setter.Value>
							</Setter>
							<Setter Property="BorderBrush" TargetName="templateRoot" Value="#FF569DE5"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Background" TargetName="templateRoot" Value="White"/>
							<Setter Property="BorderBrush" TargetName="templateRoot" Value="#FF569DE5"/>
							<Setter Property="Background" TargetName="splitBorder">
								<Setter.Value>
									<LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
										<GradientStop Color="#FFDAEBFC" Offset="0.0"/>
										<GradientStop Color="#FFC4E0FC" Offset="1.0"/>
									</LinearGradientBrush>
								</Setter.Value>
							</Setter>
							<Setter Property="BorderBrush" TargetName="splitBorder" Value="#FF569DE5"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Background" TargetName="templateRoot" Value="#FFF0F0F0"/>
							<Setter Property="BorderBrush" TargetName="templateRoot" Value="#FFD9D9D9"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Background" TargetName="templateRoot" Value="White"/>
							<Setter Property="BorderBrush" TargetName="templateRoot" Value="#FFBFBFBF"/>
							<Setter Property="Background" TargetName="splitBorder" Value="Transparent"/>
							<Setter Property="BorderBrush" TargetName="splitBorder" Value="Transparent"/>
						</MultiDataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</ResourceDictionary>